#+startup: beamer
#+OPTIONS: h:2
#+LaTeX_CLASS: beamer
#+LATEX_HEADER: \usepackage{svg}
Not sure what the due date is for this project.


* Codes 							   :noexport:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "./org-reveal")
  (require 'ox-reveal)
  (require 'ob-dot)
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

#+RESULTS:

* Introduction

The point of this final project is to learn parameters in Lorenz63
using monte carlo methods. The approach taken is to formulate a
Hamiltonian using the dynamic residuals, and then sample from the
corresponding Gibbs distribution.

Another project idea is to estimate the state of the system (and maybe
the parameters too) given noisy observations (e.g. data assimilation).

* Lorenz 63 

This system is one of the earliest examples of what would later become
known as /chaotic/ dynamical systems. It is obtained by projection of
the Rayleigh-Benard equations for convection of a thin layer onto
three orthogonal modes. The system is given by
\begin{align}
\dot{X} &= \sigma(Y-X)\\
\dot{Y} &= -XZ + rX - Y\\
\dot{Z} &= XY - bZ.
\end{align}
The parameters used by Lorenz are $\sigma = 10$, $b=8/3$ and $r=28$.

* Dynamic Residuals

Let $U$ be given by the dynamics 
\[ \dot{U} =  F(U; \theta) + \sigma \dot{W}\]
where $\theta$ is some set of parameters.

Let $T > 0$, $N$, and define $\tau = T / (N+1)$. Then, a temporal grid
$t_j=j \tau$ can be defined for $j=0...N$. Let $\Psi_t^{\theta}$ be the
pushforward operator for deterministic part of the dynamics. Given a
set of point estimates $U_j$ and parameters, define the dynamic
residual for a time $t_j$ to be
\[ e_j(\theta) := e(U_{j-1}, U_j, \theta) :=  \Psi_{\tau}^{\theta} U_{j-1} - U_j.\]

Then, a sensible way to choose the parameters is so that they minimize
\[ \sum_{j=1}^{N}|e_j|^2.\]

Because $\theta$ is a potentially high dimensional object, monte carlo
techniques can be used to perform this optimization.

* Sampling strategy
** Equilibrium distribution

- Vector of parameters $\theta = [\sigma, r, \beta ]$

- Generate samples $\theta_k$ from
  \[ f(\theta) \propto  \exp \left( \frac{\beta}{N}\sum_{j=1}^{N}|e_j(\theta)|^2 \right).\]
- The mode of $f(\theta)$ is the value that minimizes the dynamic residuals

** Proposal Distribution
  
- Independent gaussian proposal function:
  \[P(\theta_{0}, \theta_1) \propto \exp \left( \frac{1}{2} (\theta_1
  -\theta_0)^T C^{-1} (\theta_1 -\theta_0) \right) \]
- Covariance matrix: $C_{11} = .5^2$, $C_{22} = .1^2$, $C_{33}=1.0^2$,
  $C_{ij} = 0$ if $i\ne j$.
  
** Acceptance Probability 

Metropolis-Hastings acceptance probability:
\[ A(\theta_0, \theta_1 ) = \min \left\{1, \frac{f(\theta_1)
P(\theta_1, \theta_0)}{f(\theta_0) P(\theta_0, \theta_1)}  \right\}  \]
   
* Data assimilation
Note that $U_{j}$ is only in $e_j$ and $e_{j-1}$, this can be used to
simplify the optimization problem, and suggests some sort of
resampling technique.

* Code Architecture


- The integrator for the dynamical system is defined in [[file:src/integrate.cpp]].
- [[file:src/equil.cpp]] contains the equilibrium distribution
- The basic proposal distribution and metropolis acceptance function
  are defined in [[file:src/mcmc.cpp]].
- [[file:src/param_search.cpp]] contains the parameter searching method.
  
** Dependency Graph

#+BEGIN_SRC dot :file dependency.pdf
  digraph thing {
   "param_search.cpp" -> "equil.cpp";
   "param_search.cpp" -> "mcmc.cpp";
   "equil.cpp" -> "integrate.cpp";
   "param_search.cpp" -> "integrate.cpp";
   
  }
#+END_SRC

#+RESULTS:
[[file:dependency.svg]]


   

** DONE Write a test showing output of lorenz63 with and 

* Results
** Observation interval

\includegraphics{{tau-.5-0}}
 
   

** TODO Find ideal Gibbs beta
  
** TODO Increasing rayleigh number 

** Noise at long observation times
   
